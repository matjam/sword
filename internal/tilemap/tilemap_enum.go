// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package tilemap

import (
	"errors"
	"fmt"
)

const (
	// TileTypeWall is a TileType of type Wall.
	TileTypeWall TileType = iota
	// TileTypeClosedDoor is a TileType of type Closed_door.
	TileTypeClosedDoor
	// TileTypeOpenDoor is a TileType of type Open_door.
	TileTypeOpenDoor
	// TileTypeFloor is a TileType of type Floor.
	TileTypeFloor
	// TileTypeStairsUp is a TileType of type Stairs_up.
	TileTypeStairsUp
	// TileTypeStairsDown is a TileType of type Stairs_down.
	TileTypeStairsDown
)

var ErrInvalidTileType = errors.New("not a valid TileType")

const _TileTypeName = "wallclosed_dooropen_doorfloorstairs_upstairs_down"

var _TileTypeMap = map[TileType]string{
	TileTypeWall:       _TileTypeName[0:4],
	TileTypeClosedDoor: _TileTypeName[4:15],
	TileTypeOpenDoor:   _TileTypeName[15:24],
	TileTypeFloor:      _TileTypeName[24:29],
	TileTypeStairsUp:   _TileTypeName[29:38],
	TileTypeStairsDown: _TileTypeName[38:49],
}

// String implements the Stringer interface.
func (x TileType) String() string {
	if str, ok := _TileTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("TileType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x TileType) IsValid() bool {
	_, ok := _TileTypeMap[x]
	return ok
}

var _TileTypeValue = map[string]TileType{
	_TileTypeName[0:4]:   TileTypeWall,
	_TileTypeName[4:15]:  TileTypeClosedDoor,
	_TileTypeName[15:24]: TileTypeOpenDoor,
	_TileTypeName[24:29]: TileTypeFloor,
	_TileTypeName[29:38]: TileTypeStairsUp,
	_TileTypeName[38:49]: TileTypeStairsDown,
}

// ParseTileType attempts to convert a string to a TileType.
func ParseTileType(name string) (TileType, error) {
	if x, ok := _TileTypeValue[name]; ok {
		return x, nil
	}
	return TileType(0), fmt.Errorf("%s is %w", name, ErrInvalidTileType)
}

// MarshalText implements the text marshaller method.
func (x TileType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *TileType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseTileType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
