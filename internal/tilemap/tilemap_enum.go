// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package tilemap

import (
	"errors"
	"fmt"
)

const (
	// TileTypeWall is a TileType of type Wall.
	TileTypeWall TileType = iota
	// TileTypeDoor is a TileType of type Door.
	TileTypeDoor
	// TileTypeCorridor is a TileType of type Corridor.
	TileTypeCorridor
	// TileTypeFloor is a TileType of type Floor.
	TileTypeFloor
	// TileTypeStairs is a TileType of type Stairs.
	TileTypeStairs
	// TileTypeWater is a TileType of type Water.
	TileTypeWater
	// TileTypeLava is a TileType of type Lava.
	TileTypeLava
	// TileTypeTrap is a TileType of type Trap.
	TileTypeTrap
	// TileTypeRubble is a TileType of type Rubble.
	TileTypeRubble
	// TileTypeGrass is a TileType of type Grass.
	TileTypeGrass
	// TileTypeTree is a TileType of type Tree.
	TileTypeTree
	// TileTypeBush is a TileType of type Bush.
	TileTypeBush
	// TileTypeRock is a TileType of type Rock.
	TileTypeRock
	// TileTypeDirt is a TileType of type Dirt.
	TileTypeDirt
	// TileTypeSand is a TileType of type Sand.
	TileTypeSand
	// TileTypeBridge is a TileType of type Bridge.
	TileTypeBridge
	// TileTypeVoid is a TileType of type Void.
	TileTypeVoid
)

var ErrInvalidTileType = errors.New("not a valid TileType")

const _TileTypeName = "walldoorcorridorfloorstairswaterlavatraprubblegrasstreebushrockdirtsandbridgevoid"

var _TileTypeMap = map[TileType]string{
	TileTypeWall:     _TileTypeName[0:4],
	TileTypeDoor:     _TileTypeName[4:8],
	TileTypeCorridor: _TileTypeName[8:16],
	TileTypeFloor:    _TileTypeName[16:21],
	TileTypeStairs:   _TileTypeName[21:27],
	TileTypeWater:    _TileTypeName[27:32],
	TileTypeLava:     _TileTypeName[32:36],
	TileTypeTrap:     _TileTypeName[36:40],
	TileTypeRubble:   _TileTypeName[40:46],
	TileTypeGrass:    _TileTypeName[46:51],
	TileTypeTree:     _TileTypeName[51:55],
	TileTypeBush:     _TileTypeName[55:59],
	TileTypeRock:     _TileTypeName[59:63],
	TileTypeDirt:     _TileTypeName[63:67],
	TileTypeSand:     _TileTypeName[67:71],
	TileTypeBridge:   _TileTypeName[71:77],
	TileTypeVoid:     _TileTypeName[77:81],
}

// String implements the Stringer interface.
func (x TileType) String() string {
	if str, ok := _TileTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("TileType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x TileType) IsValid() bool {
	_, ok := _TileTypeMap[x]
	return ok
}

var _TileTypeValue = map[string]TileType{
	_TileTypeName[0:4]:   TileTypeWall,
	_TileTypeName[4:8]:   TileTypeDoor,
	_TileTypeName[8:16]:  TileTypeCorridor,
	_TileTypeName[16:21]: TileTypeFloor,
	_TileTypeName[21:27]: TileTypeStairs,
	_TileTypeName[27:32]: TileTypeWater,
	_TileTypeName[32:36]: TileTypeLava,
	_TileTypeName[36:40]: TileTypeTrap,
	_TileTypeName[40:46]: TileTypeRubble,
	_TileTypeName[46:51]: TileTypeGrass,
	_TileTypeName[51:55]: TileTypeTree,
	_TileTypeName[55:59]: TileTypeBush,
	_TileTypeName[59:63]: TileTypeRock,
	_TileTypeName[63:67]: TileTypeDirt,
	_TileTypeName[67:71]: TileTypeSand,
	_TileTypeName[71:77]: TileTypeBridge,
	_TileTypeName[77:81]: TileTypeVoid,
}

// ParseTileType attempts to convert a string to a TileType.
func ParseTileType(name string) (TileType, error) {
	if x, ok := _TileTypeValue[name]; ok {
		return x, nil
	}
	return TileType(0), fmt.Errorf("%s is %w", name, ErrInvalidTileType)
}

// MarshalText implements the text marshaller method.
func (x TileType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *TileType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseTileType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
